@page "/attributestreak"
@inject ExistHelper.Services.ExistService ExistService
@inject ExistHelper.Services.ApiService ApiService

<h3>Attribute Streak</h3>

@if (!hasToken)
{
    <p style="color:red;">No token available. Please set your token in Options.</p>
}
else if (results == null)
{
    <p>Loading...</p>
}
else if (results.Count == 0)
{
    <p>No data found.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Group</th>
                <th>Attribute</th>
                <th>Service</th>
                <th>Last Usage Date</th>
                <th>Days Since</th>
                <th>Value</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in sortedResults)
            {
                var value = item.Values.FirstOrDefault();
                DateTime.TryParse(value?.Date, out var lastDate);
                int daysSince = (int)(DateTime.UtcNow.Date - lastDate.Date).TotalDays;
                <tr>
                    <td>@item.Group?.Label</td>
                    <td>@item.Label</td>
                    <td>@item.Service?.Label</td>
                    <td>@(lastDate == default ? "" : lastDate.ToString("yyyy-MM-dd"))</td>
                    <td>@daysSince</td>
                    <td>@value?.Value</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<ExistHelper.Models.AttributeResult>? results;
    private IEnumerable<ExistHelper.Models.AttributeResult> sortedResults => results == null
        ? Enumerable.Empty<ExistHelper.Models.AttributeResult>()
        : results
            .OrderBy(r => {
                var v = r.Values.FirstOrDefault();
                DateTime.TryParse(v?.Date, out var d);
                return (int)(DateTime.UtcNow.Date - d.Date).TotalDays;
            })
            .ThenBy(r => r.Group?.Label)
            .ThenBy(r => r.Label);

    private bool hasToken => ApiService.IsTokenSet();

    protected override async Task OnInitializedAsync()
    {
        // Check for token
        if (!hasToken)
        {
            results = null;
            return;
        }
        results = await ExistService.GetLatestNonBlankAttributeResultsAsync();
    }
}